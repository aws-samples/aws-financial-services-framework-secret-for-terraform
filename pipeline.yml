# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    # Runs a set of commands using the runners shell
      - uses: actions/checkout@v2
      - name: Static analysis
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/setup-python@v2
        with:
          python-version: '3.7.2' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

      - run: |
          apt-get update
          apt-get install tree
          apt-get install golang-go -y
          pip install terraform-compliance
          mkdir -p ~/bin
          cd ~/bin
          export PATH="$PATH:/root/bin"
          wget https://releases.hashicorp.com/terraform/0.12.26/terraform_0.12.26_linux_amd64.zip
          apt-get update
          apt-get install unzip -y
          unzip terraform_0.12.26_linux_amd64.zip
            # Until https://github.com/hashicorp/terraform/issues/21275 is fixed we
            # need a plugin to authenticate to Terraform Cloud without needing to
            # create temporary files:
          install -d ~/.terraform.d/plugins
          cd ~/.terraform.d/plugins && curl -s --fail -LO https://github.com/apparentlymart/terraform-credentials-env/releases/download/v1.0.0/terraform-credentials-env_1.0.0_linux_amd64.zip && unzip terraform-credentials-env_1.0.0_linux_amd64.zip
          echo 'credentials_helper "env" {}' > ~/.terraformrc
          cd ${GITHUB_WORKSPACE}
          export TF_TOKEN_app_terraform_io=`echo $TFE_TOKEN`
          make generate-plan
          make run-static-tests
          
      - uses: aws-actions/configure-aws-credentials@v1
      - uses: actions/setup-go@v2
      - uses: hashicorp/setup-terraform@v1
      - name: Unit tests
        with:
          aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.TEST_AWS_REGION }}
          go-version: '^1.13.1' # The Go version to download (if necessary) and use.
          terraform_version: 0.13
      - run: |
          apt-get update
          # mkdir -p ~/bin
          # cd ~/bin
          # export PATH="$PATH:/root/bin"
          # wget https://releases.hashicorp.com/terraform/0.12.26/terraform_0.12.26_linux_amd64.zip
          # apt-get update
          # apt-get install unzip -y
          # unzip terraform_0.12.26_linux_amd64.zip
          # Until https://github.com/hashicorp/terraform/issues/21275 is fixed we
          # need a plugin to authenticate to Terraform Cloud without needing to
          # create temporary files:
          # install -d ~/.terraform.d/plugins
          #cd ~/.terraform.d/plugins && curl -s --fail -LO https://github.com/apparentlymart/terraform-credentials-env/releases/download/v1.0.0/terraform-credentials-env_1.0.0_linux_amd64.zip && unzip terraform-credentials-env_1.0.0_linux_amd64.zip
          #echo 'credentials_helper "env" {}' > ~/.terraformrc
          #cd ${GITHUB_WORKSPACE}
          # export TF_TOKEN_app_terraform_io=`echo $TFE_TOKEN`
          go mod init "github.com/aws/aws-sdk-go/aws"
          cd ${GITHUB_WORKSPACE}
          make run-unit-tests          
